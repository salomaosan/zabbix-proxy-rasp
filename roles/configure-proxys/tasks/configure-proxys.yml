- name: Verificando se existe o arquivo de serviço do zabbix proxy
  command: ls /lib/systemd/system/zabbix-proxy.service
  register: service
  ignore_errors: true
    
#- name: Copy files from foo to bar
#  copy: 
#    remote_src: True 
#    src: /lib/systemd/system/zabbix-proxy.service 
#    dest: /tmp/zabbix-proxy.service.old
#  when: exist.rc == 0

- name: Removendo arquivo de serviço anterior
  file:
    path: /lib/systemd/system/zabbix-proxy.service
    state: absent
  when: service.rc == 0

- name: Criando novos arquivos de serviço para zabbix-proxy stage e prod
  template:
    src: zabbix_proxy.service.j2
    dest: /lib/systemd/system/zabbix-proxy-{{  item.type  }}.service
    mode: u=rw,g=r,o=r
  loop:
    - "{{  env.prod  }}"
    - "{{  env.stage  }}"

- name: Verificando se existe o arquivo conf de serviço do zabbix proxy
  command: ls /etc/zabbix/zabbix-proxy.conf
  register: conf
  ignore_errors: true

- name: Removendo arquivo conf anterior
  file:
    path: /etc/zabbix/zabbix-proxy.conf
    state: absent
  when: conf.rc == 0

- name: Criando novos arquivos de conf para zabbix-proxy stage e prod
  template:
    src: zabbix_proxy.conf.j2
    dest: /etc/zabbix/zabbix_proxy_{{  item.type  }}.conf
    mode: u=rwx,g=rx,o=rx
  loop:
    - "{{  env.prod  }}"
    - "{{  env.stage  }}"

- name: Criando diretorios temporario para zabbix stage e prod
  file:
    path: "{{  item  }}"
    state: directory
    mode: '0777'
  loop:
    - "{{  env.prod.socketdir  }}"
    - "{{  env.stage.socketdir  }}"

- name: Realizando o reload dos serviços via systemd
  systemd:
    daemon_reload: yes

- name: Inicializando os serviços zabbix-proxy stage e prod
  systemd:
    state: restarted
    name: zabbix-proxy-{{  item  }}
  loop:
    - "{{  env.prod.type  }}"
    - "{{  env.stage.type  }}"